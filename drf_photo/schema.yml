openapi: 3.0.3
info:
  title: Application
  version: 1.0.0
paths:
  /api/v1/album/:
    get:
      operationId: album_retrieve
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: album_create
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: album_update
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: album_destroy
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/album-tags/:
    get:
      operationId: album_tags_retrieve
      tags:
      - album-tags
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: album_tags_create
      tags:
      - album-tags
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/album/{id}/:
    get:
      operationId: album_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: album_create_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: album_update_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: album_destroy_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - album
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthToken'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/refresh/:
    post:
      operationId: auth_refresh_create
      tags:
      - auth
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RefreshToken'
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
          description: ''
  /api/v1/create-user/:
    post:
      operationId: create_user_create
      tags:
      - create-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/v1/current-user/:
    get:
      operationId: current_user_retrieve
      tags:
      - current-user
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/page/{slugs}:
    get:
      operationId: page_retrieve
      parameters:
      - in: path
        name: slugs
        schema:
          type: string
          pattern: ^.*$
        required: true
      tags:
      - page
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/photo/:
    get:
      operationId: photo_retrieve
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: photo_create
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: photo_update
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/photo-tags/:
    get:
      operationId: photo_tags_retrieve
      tags:
      - photo-tags
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: photo_tags_create
      tags:
      - photo-tags
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/photo/{id}/:
    get:
      operationId: photo_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: photo_create_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: photo_update_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - photo
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - ru
      tags:
      - schema
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        username:
          type: string
          title: Имя пользователя
        password:
          type: string
          title: Пароль
      required:
      - password
      - username
    RefreshToken:
      type: object
      properties:
        refresh_token:
          type: string
      required:
      - refresh_token
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
      required:
      - id
      - password
      - username
  securitySchemes:
    oauth2:
      type: oauth2
      flows: {}
    tokenAuth:
      type: http
      scheme: bearer
